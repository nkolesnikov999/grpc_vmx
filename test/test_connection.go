package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/openconfig/gnmi/proto/gnmi"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

const (
	deviceIP = "127.0.0.1:17081"
	username = "admin"
	password = "admin@123"
)

type basicAuth struct {
	username string
	password string
}

func (b *basicAuth) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {
	return map[string]string{
		"username": b.username,
		"password": b.password,
	}, nil
}

func (b *basicAuth) RequireTransportSecurity() bool {
	return false
}

func main() {
	fmt.Println("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ gNMI —Å–µ—Ä–≤–µ—Ä—É...")
	fmt.Printf("–ê–¥—Ä–µ—Å: %s\n", deviceIP)
	fmt.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", username)
	fmt.Println()

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	conn, err := grpc.Dial(deviceIP,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
		grpc.WithPerRPCCredentials(&basicAuth{
			username: username,
			password: password,
		}))
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer conn.Close()

	fmt.Println("‚úÖ gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
	client := gnmi.NewGNMIClient(conn)
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
	fmt.Println("\nüì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
	getRequest := &gnmi.GetRequest{
		Path: []*gnmi.Path{
			{
				Elem: []*gnmi.PathElem{
					{Name: "system"},
					{Name: "state"},
				},
			},
		},
		Type:     gnmi.GetRequest_STATE,
		Encoding: gnmi.Encoding_PROTO,
	}

	_, err = client.Get(ctx, getRequest)
	if err != nil {
		fmt.Printf("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %v\n", err)
	} else {
		fmt.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
	}

	// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ae1.0
	fmt.Println("\nüîå –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ae1.0...")
	interfaceRequest := &gnmi.GetRequest{
		Path: []*gnmi.Path{
			{
				Elem: []*gnmi.PathElem{
					{Name: "interfaces"},
					{Name: "interface", Key: map[string]string{"name": "ae1.0"}},
					{Name: "state"},
				},
			},
		},
		Type:     gnmi.GetRequest_STATE,
		Encoding: gnmi.Encoding_PROTO,
	}

	response, err := client.Get(ctx, interfaceRequest)
	if err != nil {
		fmt.Printf("‚ùå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ae1.0 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %v\n", err)
	} else {
		fmt.Println("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ae1.0 –Ω–∞–π–¥–µ–Ω")
		fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω–æ %d —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n", len(response.Notification))
	}

	// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
	fmt.Println("\nüì° –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏...")
	stream, err := client.Subscribe(ctx)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v\n", err)
		return
	}

	subscribeRequest := &gnmi.SubscribeRequest{
		Request: &gnmi.SubscribeRequest_Subscribe{
			Subscribe: &gnmi.SubscriptionList{
				Mode: gnmi.SubscriptionList_STREAM,
				Subscription: []*gnmi.Subscription{
					{
						Path: &gnmi.Path{
							Target: "",
							Elem: []*gnmi.PathElem{
								{Name: "interfaces"},
								{Name: "interface", Key: map[string]string{"name": "ae1.0"}},
								{Name: "state"},
							},
						},
						Mode: gnmi.SubscriptionMode_TARGET_DEFINED,
					},
				},
			},
		},
	}

	err = stream.Send(subscribeRequest)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v\n", err)
		return
	}

	fmt.Println("‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

	// –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	subResponse, err := stream.Recv()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v\n", err)
	} else {
		fmt.Println("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
		switch resp := subResponse.Response.(type) {
		case *gnmi.SubscribeResponse_SyncResponse:
			fmt.Println("üì° –ü–æ–ª—É—á–µ–Ω SyncResponse")
		case *gnmi.SubscribeResponse_Update:
			fmt.Println("üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
		case *gnmi.SubscribeResponse_Error:
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v\n", resp.Error)
		}
	}

	fmt.Println("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
}
